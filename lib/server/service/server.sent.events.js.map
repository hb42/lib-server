{"version":3,"file":"server.sent.events.js","sourceRoot":"","sources":["../../../src/server/service/server.sent.events.ts"],"names":[],"mappings":";;AACA,mCAAsC;AAYtC,MAAa,eAAgB,SAAQ,qBAAY;IAI/C;QACE,KAAK,EAAE,CAAC;QASH,SAAI,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;YAC5C,IAAI,EAAE,GAAG,CAAC,CAAC;YACX,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACzB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAC5B,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YAC9B,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC;YACrB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;YACnD,GAAG,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC;YAC3C,GAAG,CAAC,SAAS,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAI1C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC,CAAC;YAEjD,MAAM,YAAY,GAAG,CAAC,IAAS,EAAE,EAAE;gBACjC,IAAI,IAAI,CAAC,EAAE,EAAE;oBACX,GAAG,CAAC,KAAK,CAAC,OAAO,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;iBAC/B;qBAAM;oBACL,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;oBACzB,EAAE,IAAI,CAAC,CAAC;iBACT;gBACD,IAAI,IAAI,CAAC,KAAK,EAAE;oBACd,GAAG,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;iBACrC;gBACD,GAAG,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACtD,CAAC,CAAC;YAEF,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;YAG9B,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;YAChC,CAAC,EAAE,EAAE,CAAC,CAAC;YAGP,GAAG,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBACnB,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;gBAC1C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACL,CAAC,CAAA;IA/CD,CAAC;IAuDM,IAAI,CAAC,IAAS,EAAE,KAAc,EAAE,EAAoB;QACzD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;IACzC,CAAC;CAEF;AAjED,0CAiEC","sourcesContent":["\nimport { EventEmitter } from \"events\";\nimport { Request, Response } from \"express\";\n\n/**\n * Server-Sent Event instance class\n * (Inspiration: https://github.com/dpskvn/express-sse)\n *\n * SSE funktioniert nicht sauber mit komprimierten Verbindungen (es kommt im Client nichts an).\n * => app.use(compression()); nicht verwenden!\n *\n * @extends EventEmitter\n */\nexport class ServerSentEvent extends EventEmitter {\n  /**\n   * Creates a new Server-Sent Event instance\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * The SSE route handler\n   *\n   * Fat Arrow, damit 'this' bei der Uebergabe als Funktions-Parameter\n   * erhalten bleibt, z.B. app.get(\"test\", sse.init)\n   */\n  public init = (req: Request, res: Response) => {\n    let id = 0;\n    req.socket.setTimeout(0);\n    req.socket.setNoDelay(true);\n    req.socket.setKeepAlive(true);\n    res.statusCode = 200;\n    res.setHeader(\"Content-Type\", \"text/event-stream\");\n    res.setHeader(\"Cache-Control\", \"no-cache\");\n    res.setHeader(\"Connection\", \"keep-alive\");\n    // res.setHeader(\"Content-Encoding\", \"deflate\");  // doesn't help w/compression\n\n    // Increase number of event listeners on init\n    this.setMaxListeners(this.getMaxListeners() + 1);\n\n    const dataListener = (data: any) => {\n      if (data.id) {\n        res.write(`id: ${data.id}\\n`);\n      } else {\n        res.write(`id: ${id}\\n`);\n        id += 1;\n      }\n      if (data.event) {\n        res.write(`event: ${data.event}\\n`);\n      }\n      res.write(`data: ${JSON.stringify(data.data)}\\n\\n`);\n    };\n\n    this.on(\"data\", dataListener);\n\n    // we're up and running\n    setTimeout(() => {\n      this.send(\"OK\", \"init\", id++);\n    }, 10);\n\n    // Remove listeners and reduce the number of max listeners on client disconnect\n    req.on(\"close\", () => {\n      this.removeListener(\"data\", dataListener);\n      this.setMaxListeners(this.getMaxListeners() - 1);\n    });\n  }\n\n  /**\n   * Send data to the SSE\n   * @param {(object|string)} data Data to send into the stream\n   * @param {string} event Event name\n   * @param {(string|number)} id Custom event ID\n   */\n  public send(data: any, event?: string, id?: string | number) {\n    this.emit(\"data\", { data, event, id });\n  }\n\n}\n"]}