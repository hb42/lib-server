{"version":3,"file":"mongo.db.js","sourceRoot":"","sources":["../../../src/server/service/mongo.db.ts"],"names":[],"mappings":";;AAAA,qCAAqC;AAErC,qDAAiD;AAMhD,QAAgB,CAAC,OAAO,GAAG,OAAO,CAAC;AAQpC,MAAa,OAAO;IAgBlB,YAAY,GAAW,EAAE,EAAU,EAAE,IAAY,EAAU,IAAgC;QAAhC,SAAI,GAAJ,IAAI,CAA4B;QALnF,QAAG,GAAG,8BAAa,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QAMnE,IAAI,CAAC,KAAK,GAAG,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC;QACxD,IAAI,qBACC,IAAI,IAEP,QAAQ,EAAW,GAAG,EACtB,cAAc,EAAK,GAAG,EACtB,iBAAiB,EAAE,IAAI,EACvB,aAAa,EAAM,IAAI,EACvB,SAAS,EAAU,CAAC,EACpB,gBAAgB,EAAG,CAAC,EACpB,eAAe,EAAI,CAAC,EACpB,eAAe,EAAI,IAAI,GACxB,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAzBD,IAAW,cAAc;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAyBM,aAAa;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC7B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE;gBAEzB,OAAO,CAAC,sBAAsB,GAAG,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC;YAClE,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEL,CAAC;IAEO,OAAO,CAAC,GAAW,EAAE,IAAgC;QAC3D,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAGvD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;gBAKhC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;gBACzC,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBAC/B,IAAI,GAAG,EAAE;wBACP,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;wBACxC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACpB,OAAO;qBACR;oBACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,KAAK,GAAG,YAAY,GAAG,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC;oBAC5F,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACxB,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAU,EAAE,EAAE;gBACzC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,qBAAqB,GAAG,GAAG,CAAC,CAAC;gBACzD,MAAM,CAAC,IAAI,CAAC,CAAC;YACf,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAEF;AA5ED,0BA4EC","sourcesContent":["import * as mongoose from \"mongoose\";\n\nimport { LoggerService } from \"./logger.service\";\n\n// ES6 native Promise in Mongoose: mongoose.Promise = global.Promise\n// (die (<any> Konstruktion ist noetig wg. Typescript-Error TS2450)\n// ES5 ext. lib einbinden: mongoose.Promise = require('q').Promise; | = require('bluebird');\n// (mongoose v5 wird in ES5 bluebird verwenden)\n(mongoose as any).Promise = Promise;\n\n/* Multiple Connections:\n  var conn = mongoose.createConnection(...)\n  -> models sind an connection gebunden => *.model.ts muesste angepasst werden\n http://mongoosejs.com/docs/connections.html\n */\n\nexport class MongoDB {\n  private connection: mongoose.Connection;\n  private readonly dbUrl: string;\n\n  // ist verfuegbar, wenn die DB laeuft\n  // (kann damit auch als check genutzt werden)\n  private readonly dbver: Promise<string>;\n  public get mongodbVersion(): Promise<string> {\n    return this.dbver;\n  }\n\n  private log = LoggerService.get(\"lib-server.server.service.MongoDB\");\n\n  /*  Mongogoose connection\n   *  opts enthaelt credentials: { user: config.mongodbUser, pass: config.mongodbPwd }\n   */\n  constructor(srv: string, db: string, port: number, private opts: mongoose.ConnectionOptions) {\n    this.dbUrl = \"mongodb://\" + srv + \":\" + port + \"/\" + db;\n    opts = {\n      ...opts,\n      // useMongoClient   : true, // verhindert deprection-warning aus mongodb\n      poolSize         : 200,  // Number of connections in the connection pool for each server instance (default 5)\n      reconnectTries   : 100,  // Server attempt to reconnect #times (default 30)\n      reconnectInterval: 1000, // Server will wait # milliseconds between retries (default 1000)\n      autoReconnect    : true, // Reconnect on error (default true)\n      keepAlive        : 0, // TCP KeepAlive on the socket with a X ms delay before start (default 0)\n      connectTimeoutMS : 0,    // TCP Connection timeout setting (default 0)\n      socketTimeoutMS  : 0,    // TCP Socket timeout setting (default 0)\n      useNewUrlParser  : true, // mongoDB >= 4\n    };\n\n    this.dbver = this.connect(this.dbUrl, opts);\n  }\n\n  public getConnection(): mongoose.Connection {\n    return this.connection;\n  }\n\n  public close(): Promise<string> {\n    return new Promise((resolve) => {\n      this.connection.close(() => {\n        // console.log(\"Mongoose connection \" + srv + \" disconnected.\");\n        resolve(\"Mongoose connection \" + this.dbUrl + \" disconnected.\");\n      });\n    });\n\n  }\n\n  private connect(url: string, opts: mongoose.ConnectionOptions): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n      this.connection = mongoose.createConnection(url, opts);\n      // this.connection.open(this.srv, this.db, this.port, this.opts);\n\n      this.connection.once(\"open\", () => {\n        // mongo-Version holen\n        // der User muss dazu die Rolle \"clusterMonitor\" fuer die DB \"admin\" haben\n        // > use farc\n        // > db.grantRolesToUser('farc',[{ role: \"clusterMonitor\", db: \"admin\" }])\n        const admin = this.connection.db.admin();\n        admin.serverStatus((err, info) => {\n          if (err) {\n            this.log.error(\"error at serverStatus\");\n            this.log.error(err);\n            return;\n          }\n          this.log.info(\"succesfully connected to \" + this.dbUrl + \" (mongoDB \" + info.version + \")\");\n          resolve(info.version);\n        });\n      });\n      this.connection.on(\"error\", (err: Error) => {\n        this.log.error(this.dbUrl + \" connection error: \" + err);\n        reject(null);\n      });\n    });\n  }\n\n}\n"]}