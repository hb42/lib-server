{"version":3,"file":"ad.service.js","sourceRoot":"","sources":["../../../src/server/service/ad.service.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport {Client, createClient, SearchOptions} from \"ldapjs\";\n\nimport { LoggerService } from \".\";\n\n/**\n * Zugriff auf das Active Directory\n *\n */\nexport class ADService {\n\n  private client: Client | null;\n\n  private log = LoggerService.get(\"lib-server.server.services.ADService\");\n\n  constructor() {\n    this.log.debug(\"c'tor ADService\");\n  }\n\n  /**\n   * Zum AD verbinden\n   *\n   * @param ldapUrl - Adresse des AD\n   * @param ldapUser - DN(!) eines Benutzers mit genuegend Rechten\n   * @param ldapPwd - Passwort des Benutzers\n   *\n   * @returns {Promise<boolean>} - true: Verbindung aufgebaut, false: Verbindung war schon vorhanden\n   */\n  public bind(ldapUrl: string, ldapUser: string, ldapPwd: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n      if (this.client) {\n        this.log.debug(\"bind() on already connected AD\");\n        resolve(false);\n      }\n      this.log.debug(\"connecting to AD...\");\n      this.client = createClient({url: ldapUrl, connectTimeout: 5000});\n      if (this.client) {\n        this.log.debug(\"binding to AD...\");\n        this.client.bind(ldapUser, ldapPwd,\n                         (err) => {\n                           if (err) {\n                             const e = \"error binding \" + err;\n                             this.log.error(e);\n                             reject(e);\n                           } else {\n                             this.log.info(\"success binding to AD\");\n                             resolve(true);\n                           }\n                         });\n      } else {\n        const e = \"ERROR: timeout connecting to AD\";\n        this.log.error(e);\n        reject(e);\n      }\n    });\n  }\n\n  /**\n   * Verbindung zum AD trennen\n   */\n  public unbind() {\n    if (!this.client) {\n      this.log.debug(\"unbind() on already unbound AD\");\n      return;\n    }\n    this.client.unbind((uberr) => {\n      if (uberr) {\n        this.log.error(\"error unbinding \" + uberr);\n      } else {\n        this.log.info(\"successfuly disconnected AD\");\n      }\n      this.client = null;\n    });\n  }\n\n  /**\n   * Abfrage auf das AD\n   *\n   * @param base - DN, ab dem gesucht werden soll\n   * @param opts {SearchOptions} - Such-Optionen, relevant sind:\n   *                                filter: <ldap-Suchstring>\n   *                                scope: \"sub\"\n   *                                paged: true\n   *                                attributes: [\"cn\", ... ]\n   */\n  public query(base: string, opts: SearchOptions): Promise<any[]> {\n\n    this.log.info(\"query start\");\n    const rc: any[] = [];\n\n    return new Promise((resolve, reject) => {\n      if (!this.client) {\n        reject(\"calling query() on unbound LDAP\");\n      } else {\n        this.client.search(base, opts,\n                           (err, res) => {\n                             if (err) {\n                               this.log.error(\"LDAP query error: \" + err.message);\n                               reject(\"LADP query error: \" + err.message);\n                             } else {\n                               res.on(\"searchEntry\", (entry) => {\n                                 rc.push(entry.object);\n                               });\n                               res.on(\"searchReference\", (referral) => {\n                                 this.log.info(\"referral: \" + referral.uris.join());\n                               });\n                               res.on(\"error\", (e) => {\n                                 this.log.error(\"LDAP query error: \" + e.message);\n                                 reject(\"LDAP query error: \" + e.message);\n                               });\n                               res.on(\"end\", (result) => {\n                                 this.log.info(\"query on.end\");\n                                 resolve(rc);\n                               });\n                             }\n                           });\n      }\n    });\n  }\n\n}\n"]}